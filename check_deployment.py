#!/usr/bin/env python3
"""
Script de v√©rification avant d√©ploiement
V√©rifie que tout est pr√™t pour l'h√©bergement
"""

import os
import sys
from pathlib import Path

def check_file_exists(file_path, description):
    """V√©rifie qu'un fichier existe"""
    if os.path.exists(file_path):
        print(f"‚úÖ {description}: {file_path}")
        return True
    else:
        print(f"‚ùå {description} manquant: {file_path}")
        return False

def check_env_variables():
    """V√©rifie les variables d'environnement"""
    required_vars = [
        "DISCORD_TOKEN",
        "DEFAULT_SERVER_IP", 
        "DEFAULT_SERVER_PORT",
        "DEFAULT_MINECRAFT_VERSION"
    ]
    
    # Charger le fichier .env si il existe
    env_file = Path(".env")
    if env_file.exists():
        with open(env_file, 'r') as f:
            content = f.read()
            for var in required_vars:
                if f"{var}=" in content and not f"{var}=your_" in content and not f"{var}=" == content.split(f"{var}=")[1].split('\n')[0]:
                    print(f"‚úÖ Variable {var} configur√©e dans .env")
                else:
                    print(f"‚ö†Ô∏è  Variable {var} non configur√©e ou avec valeur par d√©faut")
    else:
        print("‚ùå Fichier .env non trouv√©")

def main():
    print("üîç V√©rification avant d√©ploiement...\n")
    
    # V√©rifier les fichiers requis
    files_to_check = [
        ("requirements.txt", "Fichier des d√©pendances"),
        ("src/main.py", "Point d'entr√©e principal"),
        ("Procfile", "Configuration Railway/Heroku"),
        ("runtime.txt", "Version Python"),
        (".gitignore", "Configuration Git"),
        ("README.md", "Documentation")
    ]
    
    all_files_ok = True
    for file_path, description in files_to_check:
        if not check_file_exists(file_path, description):
            all_files_ok = False
    
    print("\nüîß Variables d'environnement:")
    check_env_variables()
    
    print("\nüì¶ Structure du projet:")
    essential_dirs = ["src", "commands", "config"]
    for dir_name in essential_dirs:
        if os.path.isdir(dir_name):
            print(f"‚úÖ Dossier {dir_name}/")
        else:
            print(f"‚ùå Dossier {dir_name}/ manquant")
            all_files_ok = False
    
    print("\n" + "="*50)
    if all_files_ok:
        print("üéâ Projet pr√™t pour le d√©ploiement !")
        print("\nüìã Prochaines √©tapes :")
        print("1. Pousser sur GitHub")
        print("2. Connecter √† Railway/Render")
        print("3. Configurer les variables d'environnement")
        print("4. D√©ployer !")
    else:
        print("‚ö†Ô∏è  Corrigez les probl√®mes avant de d√©ployer")
        sys.exit(1)

if __name__ == "__main__":
    main()
