import discord
from discord.ext import commands, tasks
from discord import app_commands
import sys
import os

# Ajouter le dossier parent au path pour les imports
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from config.settings import Config
from src.utils.minecraft import MinecraftServerManager

class CraftMineBot:
    def __init__(self):
        self.config = Config()
        self.minecraft_manager = MinecraftServerManager(self.config)
        
        # Configuration du bot Discord
        intents = discord.Intents.default()
        intents.message_content = True  # Requis pour les commandes
        
        # Ajouter d'autres intents si n√©cessaire
        intents.presences = False  # Pas besoin des statuts des utilisateurs
        intents.members = False    # Pas besoin de la liste des membres
        
        self.bot = commands.Bot(
            command_prefix="!",
            intents=intents,
            help_command=None  # D√©sactiver l'aide par d√©faut
        )
        
        self.setup_events()
    
    def setup_events(self):
        """Configure les √©v√©nements du bot"""
        
        @self.bot.event
        async def on_ready():
            print(f"ü§ñ Bot connect√© en tant que {self.bot.user}")
            print(f"üìä Serveur surveill√© : {self.config.server_address}")
            
            # Synchroniser les slash commands
            try:
                synced = await self.bot.tree.sync()
                print(f"‚úÖ {len(synced)} slash commands synchronis√©es")
            except Exception as e:
                print(f"‚ùå Erreur lors de la synchronisation des slash commands : {e}")
            
            # D√©marrer la t√¢che de mise √† jour du statut
            if not self.update_status.is_running():
                self.update_status.start()
        
        @self.bot.event
        async def on_command_error(ctx, error):
            """Gestion des erreurs de commandes"""
            if isinstance(error, commands.CommandNotFound):
                return  # Ignorer les commandes inconnues
            elif isinstance(error, commands.CheckFailure):
                await ctx.send("‚ùå Vous n'avez pas la permission d'utiliser cette commande.")
            elif isinstance(error, commands.MissingRequiredArgument):
                await ctx.send(f"‚ùå Argument manquant : `{error.param.name}`")
            else:
                print(f"Erreur de commande : {error}")
                await ctx.send("‚ùå Une erreur est survenue lors de l'ex√©cution de la commande.")
    
    @tasks.loop(seconds=30)
    async def update_status(self):
        """Met √† jour le statut du bot toutes les 30 secondes"""
        try:
            status = await self.minecraft_manager.get_status()
            
            if status["online"]:
                activity = discord.Game(
                    name=f"{status['players_online']}/{status['players_max']} joueurs en ligne"
                )
                discord_status = discord.Status.online
            else:
                activity = discord.Game(name="Serveur hors ligne")
                discord_status = discord.Status.dnd
            
            await self.bot.change_presence(activity=activity, status=discord_status)
        except Exception as e:
            print(f"Erreur lors de la mise √† jour du statut : {e}")
    
    async def load_commands(self):
        """Charge toutes les commandes"""
        try:
            # Importer et ajouter les commandes publiques (pr√©fixe !)
            from commands.public import setup as setup_public
            await setup_public(self.bot, self.minecraft_manager, self.config)
            
            # Importer et ajouter les commandes admin (pr√©fixe !)
            from commands.admin import setup as setup_admin
            await setup_admin(self.bot, self.config)
            
            # Importer et ajouter les slash commands publiques
            from commands.slash_commands import setup as setup_slash
            await setup_slash(self.bot, self.minecraft_manager, self.config)
            
            # Importer et ajouter les slash commands admin
            from commands.slash_admin import setup as setup_slash_admin
            await setup_slash_admin(self.bot, self.config)
            
            print("‚úÖ Commandes traditionnelles et slash commands charg√©es avec succ√®s")
        except Exception as e:
            print(f"‚ùå Erreur lors du chargement des commandes : {e}")
    
    @update_status.before_loop
    async def before_update_status(self):
        """Attendre que le bot soit pr√™t avant de d√©marrer les t√¢ches"""
        await self.bot.wait_until_ready()
    
    async def start(self):
        """D√©marre le bot"""
        if not self.config.token:
            print("‚ùå ERREUR : Token Discord manquant!")
            print("V√©rifiez que la variable DISCORD_TOKEN est d√©finie dans votre fichier .env")
            return
        
        try:
            # Charger les commandes
            await self.load_commands()
            
            # D√©marrer le bot
            print("üîó Tentative de connexion √† Discord...")
            await self.bot.start(self.config.token)
        except discord.LoginFailure:
            print("‚ùå ERREUR : Token Discord invalide!")
            print("V√©rifiez votre token sur https://discord.com/developers/applications")
        except discord.PrivilegedIntentsRequired:
            print("‚ùå ERREUR : Intents privil√©gi√©s requis!")
            print("Activez les intents sur le portail Discord Developer")
        except Exception as e:
            error_code = getattr(e, 'code', 'Inconnue')
            print(f"‚ùå Erreur lors du d√©marrage : {e}")
            if str(error_code) == '4004':
                print("üí° Solution : V√©rifiez que votre token est valide et que le bot n'est pas d√©j√† en cours d'ex√©cution")
            elif str(error_code) == '4014':
                print("üí° Solution : Activez les intents privil√©gi√©s sur le portail Discord")
            print(f"üìã Code d'erreur : {error_code}")
    
    def run(self):
        """Lance le bot (version synchrone)"""
        import asyncio
        try:
            asyncio.run(self.start())
        except KeyboardInterrupt:
            print("\nüõë Arr√™t du bot...")
        except Exception as e:
            print(f"‚ùå Erreur fatale : {e}")

if __name__ == "__main__":
    bot = CraftMineBot()
    bot.run()
